(* File generated by the BNF Converter (bnfc 2.9.5). *)

(* show functions *)

(* use string buffers for efficient string concatenations *)
type showable = Buffer.t -> unit

let show (s : showable) : string =
    let init_size = 16 in (* you may want to adjust this *)
    let b = Buffer.create init_size in
    s b;
    Buffer.contents b

let emptyS : showable = fun buf -> ()

let c2s (c:char) : showable = fun buf -> Buffer.add_char buf c
let s2s (s:string) : showable = fun buf -> Buffer.add_string buf s

let ( >> ) (s1 : showable) (s2 : showable) : showable = fun buf -> s1 buf; s2 buf

let showChar (c:char) : showable = fun buf ->
    Buffer.add_string buf ("'" ^ Char.escaped c ^ "'")

let showString (s:string) : showable = fun buf ->
    Buffer.add_string buf ("\"" ^ String.escaped s ^ "\"")

let showList (showFun : 'a -> showable) (xs : 'a list) : showable = fun buf ->
    let rec f ys = match ys with
        [] -> ()
      | [y] -> showFun y buf
      | y::ys -> showFun y buf; Buffer.add_string buf "; "; f ys
    in
        Buffer.add_char buf '[';
        f xs;
        Buffer.add_char buf ']'


let showInt (i:int) : showable = s2s (string_of_int i)
let showFloat (f:float) : showable = s2s (string_of_float f)
let rec showIdent (AbsLBNF.Ident i) : showable = s2s "Ident " >> showString i

let rec showGrammar (e : AbsLBNF.grammar) : showable = match e with
       AbsLBNF.MkGrammar defs -> s2s "MkGrammar" >> c2s ' ' >> c2s '(' >> showList showDef defs >> c2s ')'


and showDef (e : AbsLBNF.def) : showable = match e with
       AbsLBNF.Rule (label, cat, items) -> s2s "Rule" >> c2s ' ' >> c2s '(' >> showLabel label  >> s2s ", " >>  showCat cat  >> s2s ", " >>  showList showItem items >> c2s ')'
  |    AbsLBNF.Comment string -> s2s "Comment" >> c2s ' ' >> c2s '(' >> showString string >> c2s ')'
  |    AbsLBNF.Comments (string0, string) -> s2s "Comments" >> c2s ' ' >> c2s '(' >> showString string0  >> s2s ", " >>  showString string >> c2s ')'
  |    AbsLBNF.Internal (label, cat, items) -> s2s "Internal" >> c2s ' ' >> c2s '(' >> showLabel label  >> s2s ", " >>  showCat cat  >> s2s ", " >>  showList showItem items >> c2s ')'
  |    AbsLBNF.Token (ident, reg) -> s2s "Token" >> c2s ' ' >> c2s '(' >> showIdent ident  >> s2s ", " >>  showReg reg >> c2s ')'
  |    AbsLBNF.PosToken (ident, reg) -> s2s "PosToken" >> c2s ' ' >> c2s '(' >> showIdent ident  >> s2s ", " >>  showReg reg >> c2s ')'
  |    AbsLBNF.Entryp idents -> s2s "Entryp" >> c2s ' ' >> c2s '(' >> showList showIdent idents >> c2s ')'
  |    AbsLBNF.Separator (minimumsize, cat, string) -> s2s "Separator" >> c2s ' ' >> c2s '(' >> showMinimumSize minimumsize  >> s2s ", " >>  showCat cat  >> s2s ", " >>  showString string >> c2s ')'
  |    AbsLBNF.Terminator (minimumsize, cat, string) -> s2s "Terminator" >> c2s ' ' >> c2s '(' >> showMinimumSize minimumsize  >> s2s ", " >>  showCat cat  >> s2s ", " >>  showString string >> c2s ')'
  |    AbsLBNF.Coercions (ident, integer) -> s2s "Coercions" >> c2s ' ' >> c2s '(' >> showIdent ident  >> s2s ", " >>  showInt integer >> c2s ')'
  |    AbsLBNF.Rules (ident, rhss) -> s2s "Rules" >> c2s ' ' >> c2s '(' >> showIdent ident  >> s2s ", " >>  showList showRHS rhss >> c2s ')'
  |    AbsLBNF.Layout strings -> s2s "Layout" >> c2s ' ' >> c2s '(' >> showList showString strings >> c2s ')'
  |    AbsLBNF.LayoutStop strings -> s2s "LayoutStop" >> c2s ' ' >> c2s '(' >> showList showString strings >> c2s ')'
  |    AbsLBNF.LayoutTop  -> s2s "LayoutTop"


and showItem (e : AbsLBNF.item) : showable = match e with
       AbsLBNF.Terminal string -> s2s "Terminal" >> c2s ' ' >> c2s '(' >> showString string >> c2s ')'
  |    AbsLBNF.NTerminal cat -> s2s "NTerminal" >> c2s ' ' >> c2s '(' >> showCat cat >> c2s ')'


and showCat (e : AbsLBNF.cat) : showable = match e with
       AbsLBNF.ListCat cat -> s2s "ListCat" >> c2s ' ' >> c2s '(' >> showCat cat >> c2s ')'
  |    AbsLBNF.IdCat ident -> s2s "IdCat" >> c2s ' ' >> c2s '(' >> showIdent ident >> c2s ')'


and showLabel (e : AbsLBNF.label) : showable = match e with
       AbsLBNF.LabNoP labelid -> s2s "LabNoP" >> c2s ' ' >> c2s '(' >> showLabelId labelid >> c2s ')'
  |    AbsLBNF.LabP (labelid, profitems) -> s2s "LabP" >> c2s ' ' >> c2s '(' >> showLabelId labelid  >> s2s ", " >>  showList showProfItem profitems >> c2s ')'
  |    AbsLBNF.LabPF (labelid0, labelid, profitems) -> s2s "LabPF" >> c2s ' ' >> c2s '(' >> showLabelId labelid0  >> s2s ", " >>  showLabelId labelid  >> s2s ", " >>  showList showProfItem profitems >> c2s ')'
  |    AbsLBNF.LabF (labelid0, labelid) -> s2s "LabF" >> c2s ' ' >> c2s '(' >> showLabelId labelid0  >> s2s ", " >>  showLabelId labelid >> c2s ')'


and showLabelId (e : AbsLBNF.labelId) : showable = match e with
       AbsLBNF.Id ident -> s2s "Id" >> c2s ' ' >> c2s '(' >> showIdent ident >> c2s ')'
  |    AbsLBNF.Wild  -> s2s "Wild"
  |    AbsLBNF.ListE  -> s2s "ListE"
  |    AbsLBNF.ListCons  -> s2s "ListCons"
  |    AbsLBNF.ListOne  -> s2s "ListOne"


and showProfItem (e : AbsLBNF.profItem) : showable = match e with
       AbsLBNF.ProfIt (intlists, integers) -> s2s "ProfIt" >> c2s ' ' >> c2s '(' >> showList showIntList intlists  >> s2s ", " >>  showList showInt integers >> c2s ')'


and showIntList (e : AbsLBNF.intList) : showable = match e with
       AbsLBNF.Ints integers -> s2s "Ints" >> c2s ' ' >> c2s '(' >> showList showInt integers >> c2s ')'


and showRHS (e : AbsLBNF.rHS) : showable = match e with
       AbsLBNF.MkRHS items -> s2s "MkRHS" >> c2s ' ' >> c2s '(' >> showList showItem items >> c2s ')'


and showMinimumSize (e : AbsLBNF.minimumSize) : showable = match e with
       AbsLBNF.MNonempty  -> s2s "MNonempty"
  |    AbsLBNF.MEmpty  -> s2s "MEmpty"


and showReg (e : AbsLBNF.reg) : showable = match e with
       AbsLBNF.RSeq (reg0, reg) -> s2s "RSeq" >> c2s ' ' >> c2s '(' >> showReg reg0  >> s2s ", " >>  showReg reg >> c2s ')'
  |    AbsLBNF.RAlt (reg0, reg) -> s2s "RAlt" >> c2s ' ' >> c2s '(' >> showReg reg0  >> s2s ", " >>  showReg reg >> c2s ')'
  |    AbsLBNF.RMinus (reg0, reg) -> s2s "RMinus" >> c2s ' ' >> c2s '(' >> showReg reg0  >> s2s ", " >>  showReg reg >> c2s ')'
  |    AbsLBNF.RStar reg -> s2s "RStar" >> c2s ' ' >> c2s '(' >> showReg reg >> c2s ')'
  |    AbsLBNF.RPlus reg -> s2s "RPlus" >> c2s ' ' >> c2s '(' >> showReg reg >> c2s ')'
  |    AbsLBNF.ROpt reg -> s2s "ROpt" >> c2s ' ' >> c2s '(' >> showReg reg >> c2s ')'
  |    AbsLBNF.REps  -> s2s "REps"
  |    AbsLBNF.RChar char -> s2s "RChar" >> c2s ' ' >> c2s '(' >> showChar char >> c2s ')'
  |    AbsLBNF.RAlts string -> s2s "RAlts" >> c2s ' ' >> c2s '(' >> showString string >> c2s ')'
  |    AbsLBNF.RSeqs string -> s2s "RSeqs" >> c2s ' ' >> c2s '(' >> showString string >> c2s ')'
  |    AbsLBNF.RDigit  -> s2s "RDigit"
  |    AbsLBNF.RLetter  -> s2s "RLetter"
  |    AbsLBNF.RUpper  -> s2s "RUpper"
  |    AbsLBNF.RLower  -> s2s "RLower"
  |    AbsLBNF.RAny  -> s2s "RAny"



