(* File generated by the BNF Converter (bnfc 2.9.5). *)

(* Lexer definition for ocamllex. *)

(* preamble *)
{
open ParLBNF
open Lexing

let symbol_table = Hashtbl.create 17
let _ = List.iter (fun (kwd, tok) -> Hashtbl.add symbol_table kwd tok)
                  [(";", SYMB1);(".", SYMB2);("::=", SYMB3);("[", SYMB4);("]", SYMB5);("_", SYMB6);("(", SYMB7);(":", SYMB8);(")", SYMB9);(",", SYMB10);("|", SYMB11);("-", SYMB12);("*", SYMB13);("+", SYMB14);("?", SYMB15);("{", SYMB16);("}", SYMB17)]

let resword_table = Hashtbl.create 19
let _ = List.iter (fun (kwd, tok) -> Hashtbl.add resword_table kwd tok)
                  [("comment", KW_comment);("internal", KW_internal);("token", KW_token);("position", KW_position);("entrypoints", KW_entrypoints);("separator", KW_separator);("terminator", KW_terminator);("coercions", KW_coercions);("rules", KW_rules);("layout", KW_layout);("stop", KW_stop);("toplevel", KW_toplevel);("nonempty", KW_nonempty);("eps", KW_eps);("digit", KW_digit);("letter", KW_letter);("upper", KW_upper);("lower", KW_lower);("char", KW_char)]

let unescapeInitTail (s:string) : string =
  let rec unesc s = match s with
      '\\'::c::cs when List.mem c ['\"'; '\\'; '\''] -> c :: unesc cs
    | '\\'::'n'::cs  -> '\n' :: unesc cs
    | '\\'::'t'::cs  -> '\t' :: unesc cs
    | '\\'::'r'::cs  -> '\r' :: unesc cs
    | '\"'::[]    -> []
    | '\''::[]    -> []
    | c::cs      -> c :: unesc cs
    | _         -> []
  (* explode/implode from caml FAQ *)
  in let explode (s : string) : char list =
      let rec exp i l =
        if i < 0 then l else exp (i - 1) (s.[i] :: l) in
      exp (String.length s - 1) []
  in let implode (l : char list) : string =
      let res = Buffer.create (List.length l) in
      List.iter (Buffer.add_char res) l;
      Buffer.contents res
  in implode (unesc (List.tl (explode s)))

let incr_lineno (lexbuf:Lexing.lexbuf) : unit =
    let pos = lexbuf.lex_curr_p in
        lexbuf.lex_curr_p <- { pos with
            pos_lnum = pos.pos_lnum + 1;
            pos_bol = pos.pos_cnum;
        }
}

(* BNFC character classes *)
let _letter = ['a'-'z' 'A'-'Z' '\192' - '\255'] # ['\215' '\247']    (*  isolatin1 letter FIXME *)
let _upper  = ['A'-'Z' '\192'-'\221'] # '\215'      (*  capital isolatin1 letter FIXME *)
let _lower  = ['a'-'z' '\222'-'\255'] # '\247'      (*  small isolatin1 letter FIXME *)
let _digit  = ['0'-'9']                             (*  _digit *)
let _idchar = _letter | _digit | ['_' '\'']         (*  identifier character *)
let _universal = _                                  (* universal: any character *)

(* reserved words consisting of special symbols *)
let rsyms = ";" | "." | "::=" | "[" | "]" | "_" | "(" | ":" | ")" | "," | "|" | "-" | "*" | "+" | "?" | "{" | "}"


(* lexing rules *)
rule token =
  parse "--" (_ # '\n')*
                { token lexbuf }
      | "{-" [^ '-']* '-' ([^ '-' '}'][^ '-']* '-' | '-')* '}'
                { token lexbuf }
      | rsyms   { let x = lexeme lexbuf in try Hashtbl.find symbol_table x with Not_found -> failwith ("internal lexer error: reserved symbol " ^ x ^ " not found in hashtable") }
      | _letter _idchar*
                { let l = lexeme lexbuf in try Hashtbl.find resword_table l with Not_found -> TOK_Ident l }
      | _digit+ { TOK_Integer (int_of_string (lexeme lexbuf)) }
      | _digit+ '.' _digit+ ('e' ('-')? _digit+)?
                { TOK_Double (float_of_string (lexeme lexbuf)) }
      | '\"' (([^ '\"' '\\' '\n']) | ('\\' ('\"' | '\\' | '\'' | 'n' | 't' | 'r')))* '\"'
                { TOK_String (unescapeInitTail (lexeme lexbuf)) }
      | '\'' (([^ '\'' '\\']) | ('\\' ('\\' | '\'' | 'n' | 't' | 'r'))) '\''
                { TOK_Char (unescapeInitTail (lexeme lexbuf)).[0] }
      | [' ' '\t' '\r']
                { token lexbuf }
      | '\n'    { incr_lineno lexbuf; token lexbuf }
      | eof     { TOK_EOF }
