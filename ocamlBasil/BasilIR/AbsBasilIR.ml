(* File generated by the BNF Converter (bnfc 2.9.5). *)

type bVTYPE = BVTYPE of string
and bIdent = BIdent of ((int * int) * string)
and str = Str of string
and integerHex = IntegerHex of string
and program =
   Prog of declaration list
[@@deriving iter, map, fold]

and declaration =
   LetDecl of bIdent * mExpr
 | MemDecl of bIdent * typeT
 | VarDecl of bIdent * typeT
 | Procedure of bIdent * params list * params list * procDef
[@@deriving iter, map, fold]

and mExpr =
   MSym of bIdent
 | BlockM of block

and intType =
   IntT

and boolType =
   BoolT

and mapType =
   MapT of typeT * typeT

and bVType =
   ShortBVT of bVTYPE
 | BitvectorType of intLit

and typeT =
   TypeIntType of intType
 | TypeBoolType of boolType
 | TypeMapType of mapType
 | TypeBVType of bVType

and intLit =
   HexInt of integerHex
 | DecInt of int

and addrAttr =
   AddrAttrSome of intLit
 | AddrAttrNone
 | AddrAttrEmpty

and endian =
   LittleEndian
 | BigEndian

and statement =
   AssignStmt of assign
 | SLoad of bVLVar * endian * bIdent * bVExpr * intLit
 | SStore of endian * bIdent * expr * bVExpr * intLit
 | DirectCall of bIdent * expr list
 | DirectCallReturnLocal of lVar list * bIdent * expr list
 | DirectCallReturn of lVar list * bIdent * expr list
 | IndirectCall of expr
 | Assume of expr
 | Assert of expr
[@@deriving iter, map, fold]

and assign =
   IntAssign of intLVar * intExpr
 | BVAssign of bVLVar * bVExpr
 | BoolAssign of boolLVar * logExpr
[@@deriving iter, map, fold]

and jump =
   GoTo of bIdent list
 | Unreachable
 | Return of expr list
[@@deriving iter, map, fold]

and lVar =
   LVarIntLVar of intLVar
 | LVarBVLVar of bVLVar
 | LVarBoolLVar of boolLVar

and bVLVar =
   LocalBVLVar of bIdent * bVType
 | GlobalBVLVar of bIdent * bVType

and intLVar =
   LocalIntLVar of bIdent * intType
 | GlobalIntLVar of bIdent * intType

and boolLVar =
   LocalBoolLVar of bIdent * boolType
 | GlobalBoolLVar of bIdent * boolType

and block =
   B of bIdent * addrAttr * statement list * jump
[@@deriving iter, map, fold]

and pEntry =
   EntrySome of block
 | EntryNone

and pExit =
   ESome of block
 | ENone

and pAddress =
   AddrSome of intLit
 | AddrNone

and internalBlocks =
   BSome of block list
 | BNone

and procDef =
   PD of str * pAddress * pEntry * pExit * internalBlocks
[@@deriving iter, map, fold]

and params =
   Param of bIdent * typeT
[@@deriving iter, map, fold]

and expr =
   BitvectorExpr of bVExpr
 | LogicalExpr of logExpr
 | IntegerExpr of intExpr
[@@deriving iter, map, fold]

and bVExpr =
   BVBinary of bVBinOp * bVExpr * bVExpr
 | BVUnary of bVUnOp * bVExpr
 | ZeroExtend of intLit * bVExpr
 | SignExtend of intLit * bVExpr
 | Extract of intLit * intLit * bVExpr
 | Concat of bVExpr * bVExpr
 | BVLiteral of intLit * bVType
 | RBVVar of bVRVar
[@@deriving iter, map, fold]

and intExpr =
   IntLiteral of intLit
 | RIntVar of intRVar
 | IntBinary of intBinOp * intExpr * intExpr
 | IntNeg of intExpr
[@@deriving iter, map, fold]

and logExpr =
   BVLogBinary of bVLogicalBinOp * bVExpr * bVExpr
 | RLogVar of boolRVar
 | BoolLit of boolLiteral
 | IntLogBinary of intLogicalBinOp * intExpr * intExpr
 | BoolLogBinOp of boolBinOp * logExpr * logExpr
 | BoolNot of logExpr
[@@deriving iter, map, fold]

and intRVar =
   IRV of bIdent * intType

and bVRVar =
   BVRV of bIdent * bVType

and boolRVar =
   BRV of bIdent * boolType

and boolLiteral =
   BoolLiteral_true
 | BoolLiteral_false

and bVUnOp =
   BVUnOp_bvnot
 | BVUnOp_bvneg

and bVBinOp =
   BVBinOp_bvand
 | BVBinOp_bvor
 | BVBinOp_bvadd
 | BVBinOp_bvmul
 | BVBinOp_bvudiv
 | BVBinOp_bvurem
 | BVBinOp_bvshl
 | BVBinOp_bvlshr
 | BVBinOp_bvnand
 | BVBinOp_bvnor
 | BVBinOp_bvxor
 | BVBinOp_bvxnor
 | BVBinOp_bvcomp
 | BVBinOp_bvsub
 | BVBinOp_bvsdiv
 | BVBinOp_bvsrem
 | BVBinOp_bvsmod
 | BVBinOp_bvashr

and bVLogicalBinOp =
   BVLogicalBinOp_bvule
 | BVLogicalBinOp_bvugt
 | BVLogicalBinOp_bvuge
 | BVLogicalBinOp_bvslt
 | BVLogicalBinOp_bvsle
 | BVLogicalBinOp_bvsgt
 | BVLogicalBinOp_bvsge
 | BVLogicalBinOp_bveq
 | BVLogicalBinOp_bvneq
 | BVLogicalBinOp_bvult

and intBinOp =
   IntBinOp_intadd
 | IntBinOp_intmul
 | IntBinOp_intsub
 | IntBinOp_intdiv
 | IntBinOp_intmod

and intLogicalBinOp =
   IntLogicalBinOp_inteq
 | IntLogicalBinOp_intneq
 | IntLogicalBinOp_intlt
 | IntLogicalBinOp_intle
 | IntLogicalBinOp_intgt
 | IntLogicalBinOp_intge

and boolBinOp =
   BoolBinOp_booleq
 | BoolBinOp_boolneq
 | BoolBinOp_booland
 | BoolBinOp_boolor
 | BoolBinOp_boolimplies
 | BoolBinOp_boolequiv

