(* File generated by the BNF Converter (bnfc 2.9.5). *)

type bVTYPE = BVTYPE of string
and bIdent = BIdent of ((int * int) * string)
and beginList = BeginList of ((int * int) * string)
and endList = EndList of ((int * int) * string)
and beginRec = BeginRec of ((int * int) * string)
and endRec = EndRec of ((int * int) * string)
and str = Str of string
and integerHex = IntegerHex of string
and bitvectorHex = BitvectorHex of string
and program =
   Prog of declaration list

and declaration =
   LetDecl of bIdent * mExpr
 | MemDecl of bIdent * typeT
 | VarDecl of bIdent * typeT
 | Procedure of bIdent * params list * params list * procDef

and mExpr =
   MSym of bIdent
 | BlockM of block

and intType =
   IntT

and boolType =
   BoolT

and mapType =
   MapT of typeT * beginList * typeT * endList

and bVType =
   BVT of bVTYPE

and typeT =
   TypeIntType of intType
 | TypeBoolType of boolType
 | TypeMapType of mapType
 | TypeBVType of bVType

and intVal =
   HexInt of integerHex
 | DecInt of int

and addrAttr =
   AddrAttrSome of beginRec * intVal * endRec
 | AddrAttrNone
 | AddrAttrEmpty of beginRec * endRec

and endian =
   LittleEndian
 | BigEndian

and statement =
   Assign of lVar * expr
 | SLoad of lVar * endian * bIdent * expr * intVal
 | SStore of endian * bIdent * expr * expr * intVal
 | DirectCall of callLVars * bIdent * expr list
 | IndirectCall of expr
 | Assume of expr
 | Assert of expr

and callLVars =
   NoOutParams
 | LocalVars of lVar list
 | ListOutParams of lVar list

and jump =
   GoTo of bIdent list
 | Unreachable
 | Return of expr list

and lVar =
   LVarDef of bIdent * typeT
 | GlobalLVar of bIdent * typeT

and block =
   B of bIdent * addrAttr * beginList * statement list * jump * endList

and pEntry =
   EntrySome of str
 | EntryNone

and pAddress =
   AddrSome of intVal
 | AddrNone

and internalBlocks =
   BSome of beginList * block list * endList
 | BNone

and procDef =
   PD of beginRec * str * pAddress * pEntry * internalBlocks * endRec

and params =
   Param of bIdent * typeT

and expr =
   RVar of bIdent * typeT
 | BinaryExpr of binOp * expr * expr
 | UnaryExpr of unOp * expr
 | ZeroExtend of intVal * expr
 | SignExtend of intVal * expr
 | Extract of intVal * intVal * expr
 | Concat of expr * expr
 | BVLiteral of intVal * bVType
 | IntLiteral of intVal
 | TrueLiteral
 | FalseLiteral

and binOp =
   BinOpBVBinOp of bVBinOp
 | BinOpBVLogicalBinOp of bVLogicalBinOp
 | BinOpBoolBinOp of boolBinOp
 | BinOpIntLogicalBinOp of intLogicalBinOp
 | BinOpIntBinOp of intBinOp

and unOp =
   UnOpBVUnOp of bVUnOp
 | UnOp_boolnot
 | UnOp_intneg

and bVUnOp =
   BVUnOp_bvnot
 | BVUnOp_bvneg

and bVBinOp =
   BVBinOp_bvand
 | BVBinOp_bvor
 | BVBinOp_bvadd
 | BVBinOp_bvmul
 | BVBinOp_bvudiv
 | BVBinOp_bvurem
 | BVBinOp_bvshl
 | BVBinOp_bvlshr
 | BVBinOp_bvult
 | BVBinOp_bvnand
 | BVBinOp_bvnor
 | BVBinOp_bvxor
 | BVBinOp_bvxnor
 | BVBinOp_bvcomp
 | BVBinOp_bvsub
 | BVBinOp_bvsdiv
 | BVBinOp_bvsrem
 | BVBinOp_bvsmod
 | BVBinOp_bvashr

and bVLogicalBinOp =
   BVLogicalBinOp_bvule
 | BVLogicalBinOp_bvugt
 | BVLogicalBinOp_bvuge
 | BVLogicalBinOp_bvslt
 | BVLogicalBinOp_bvsle
 | BVLogicalBinOp_bvsgt
 | BVLogicalBinOp_bvsge
 | BVLogicalBinOp_bveq
 | BVLogicalBinOp_bvneq

and intBinOp =
   IntBinOp_intadd
 | IntBinOp_intmul
 | IntBinOp_intsub
 | IntBinOp_intdiv
 | IntBinOp_intmod

and intLogicalBinOp =
   IntLogicalBinOp_inteq
 | IntLogicalBinOp_intneq
 | IntLogicalBinOp_intlt
 | IntLogicalBinOp_intle
 | IntLogicalBinOp_intgt
 | IntLogicalBinOp_intge

and boolBinOp =
   BoolBinOp_booleq
 | BoolBinOp_boolneq
 | BoolBinOp_booland
 | BoolBinOp_boolor
 | BoolBinOp_boolimplies
 | BoolBinOp_boolequiv

