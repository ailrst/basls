(* File generated by the BNF Converter (bnfc 2.9.5). *)

type bVTYPE = BVTYPE of string
and bIdent = BIdent of ((int * int) * string)
and localIdent = LocalIdent of ((int * int) * string)
and globalIdent = GlobalIdent of ((int * int) * string)
and blockIdent = BlockIdent of ((int * int) * string)
and procIdent = ProcIdent of ((int * int) * string)
and beginList = BeginList of ((int * int) * string)
and endList = EndList of ((int * int) * string)
and beginRec = BeginRec of ((int * int) * string)
and endRec = EndRec of ((int * int) * string)
and str = Str of string
and integerHex = IntegerHex of string
and bitvectorHex = BitvectorHex of string
and program =
   Prog of declaration list

and gobbleScolon =
   EmptyScolon
 | SomeScolon of gobbleScolon

and declaration =
   AxiomDecl of attrDefList * expr
 | MemDecl of globalIdent * typeT
 | VarDecl of globalIdent * typeT
 | ProgDeclSpec of attrDefList * beginList * progSpecDecl list * endList
 | ProgDecl of attrDefList
 | Procedure of procDef

and intType =
   IntT

and boolType =
   BoolT

and mapType =
   MapT of typeT * beginList * typeT * endList

and bVType =
   BVT of bVTYPE

and typeT =
   TypeIntType of intType
 | TypeBoolType of boolType
 | TypeMapType of mapType
 | TypeBVType of bVType

and intVal =
   HexInt of integerHex
 | DecInt of int

and bVVal =
   BV of intVal * bVType

and endian =
   LittleEndian
 | BigEndian

and assignment =
   Assignment1 of lVar * expr

and statement =
   Assign of assignment
 | SimulAssign of assignment list
 | SLoad of lVar * endian * globalIdent * expr * intVal
 | SStore of endian * globalIdent * expr * expr * intVal
 | DirectCall of callLVars * procIdent * expr list
 | IndirectCall of expr
 | Assume of expr * attrDefList
 | Guard of expr * attrDefList
 | Assert of expr * attrDefList

and localVar =
   LocalVar1 of localIdent * typeT

and globalVar =
   GlobalVar1 of globalIdent * typeT

and callLVars =
   NoOutParams
 | LocalVars of localVar list
 | ListOutParams of lVar list

and jump =
   GoTo of blockIdent list
 | Unreachable
 | Return of expr list

and lVar =
   LVarDef of localVar
 | GlobalLVar of globalVar

and block =
   Block1 of blockIdent * attrDefList * beginList * statement list * jump * endList

and attributeItem =
   IntAttr of bIdent * intVal
 | BVAttr of bIdent * bVVal
 | ExprAttr of bIdent * expr
 | StringAttr of bIdent * str

and attrDefList =
   AttrDefListSome of beginRec * attributeItem list * gobbleScolon * endRec
 | AttrDefListEmpty

and params =
   Param of localIdent * typeT

and procSig =
   ProcedureSig of procIdent * params list * params list

and procDef =
   ProcedureDecl of procSig * attrDefList * funSpecDecl list
 | ProcedureDef of procSig * attrDefList * funSpecDecl list * beginList * block list * endList

and expr =
   BVLiteral of bVVal
 | IntLiteral of intVal
 | TrueLiteral
 | FalseLiteral
 | LRVar of localVar
 | GRVar of globalVar
 | FunctionOp of globalIdent * expr list
 | BinaryExpr of binOp * expr * expr
 | UnaryExpr of unOp * expr
 | ZeroExtend of intVal * expr
 | SignExtend of intVal * expr
 | Extract of intVal * intVal * expr
 | Concat of expr * expr

and binOp =
   BinOpBVBinOp of bVBinOp
 | BinOpBVLogicalBinOp of bVLogicalBinOp
 | BinOpBoolBinOp of boolBinOp
 | BinOpIntLogicalBinOp of intLogicalBinOp
 | BinOpIntBinOp of intBinOp
 | BinOpEqOp of eqOp

and unOp =
   UnOpBVUnOp of bVUnOp
 | UnOp_boolnot
 | UnOp_intneg
 | UnOp_booltobv1

and eqOp =
   EqOp_eq
 | EqOp_neq

and bVUnOp =
   BVUnOp_bvnot
 | BVUnOp_bvneg

and bVBinOp =
   BVBinOp_bvand
 | BVBinOp_bvor
 | BVBinOp_bvadd
 | BVBinOp_bvmul
 | BVBinOp_bvudiv
 | BVBinOp_bvurem
 | BVBinOp_bvshl
 | BVBinOp_bvlshr
 | BVBinOp_bvnand
 | BVBinOp_bvnor
 | BVBinOp_bvxor
 | BVBinOp_bvxnor
 | BVBinOp_bvcomp
 | BVBinOp_bvsub
 | BVBinOp_bvsdiv
 | BVBinOp_bvsrem
 | BVBinOp_bvsmod
 | BVBinOp_bvashr

and bVLogicalBinOp =
   BVLogicalBinOp_bvule
 | BVLogicalBinOp_bvugt
 | BVLogicalBinOp_bvuge
 | BVLogicalBinOp_bvult
 | BVLogicalBinOp_bvslt
 | BVLogicalBinOp_bvsle
 | BVLogicalBinOp_bvsgt
 | BVLogicalBinOp_bvsge

and intBinOp =
   IntBinOp_intadd
 | IntBinOp_intmul
 | IntBinOp_intsub
 | IntBinOp_intdiv
 | IntBinOp_intmod

and intLogicalBinOp =
   IntLogicalBinOp_intlt
 | IntLogicalBinOp_intle
 | IntLogicalBinOp_intgt
 | IntLogicalBinOp_intge

and boolBinOp =
   BoolBinOp_booland
 | BoolBinOp_boolor
 | BoolBinOp_boolimplies

and rEQUIRE =
   REQUIRE_require
 | REQUIRE_requires

and eNSURE =
   ENSURE_ensure
 | ENSURE_ensures

and funSpecDecl =
   Require of rEQUIRE * expr
 | Ensure of eNSURE * expr
 | LoopInvariant of blockIdent * expr

and progSpecDecl =
   Rely of expr
 | Guarantee of expr

