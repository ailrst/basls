(* File generated by the BNF Converter (bnfc 2.9.5). *)

module SkelBasilIR = struct

open AbsBasilIR

type result = string

let failure x = failwith "Undefined case." (* x discarded *)

let rec transBVTYPE (x : bVTYPE) : result = match x with
    BVTYPE string -> failure x


and transUserIdent (x : userIdent) : result = match x with
    UserIdent string -> failure x


and transBIdent (x : bIdent) : result = match x with
    BIdent string -> failure x


and transLocalIdent (x : localIdent) : result = match x with
    LocalIdent string -> failure x


and transGlobalIdent (x : globalIdent) : result = match x with
    GlobalIdent string -> failure x


and transBlockIdent (x : blockIdent) : result = match x with
    BlockIdent string -> failure x


and transProcIdent (x : procIdent) : result = match x with
    ProcIdent string -> failure x


and transBeginList (x : beginList) : result = match x with
    BeginList string -> failure x


and transEndList (x : endList) : result = match x with
    EndList string -> failure x


and transBeginRec (x : beginRec) : result = match x with
    BeginRec string -> failure x


and transEndRec (x : endRec) : result = match x with
    EndRec string -> failure x


and transStr (x : str) : result = match x with
    Str string -> failure x


and transIntegerHex (x : integerHex) : result = match x with
    IntegerHex string -> failure x


and transBitvectorHex (x : bitvectorHex) : result = match x with
    BitvectorHex string -> failure x


and transProgram (x : program) : result = match x with
    Prog declarations -> failure x


and transDeclaration (x : declaration) : result = match x with
    AxiomDecl (attrdeflist, expr) -> failure x
  | MemDecl (globalident, type') -> failure x
  | VarDecl (globalident, type') -> failure x
  | ProgDecl (attrdeflist, thrspecdecls) -> failure x
  | Procedure procdef -> failure x


and transIntType (x : intType) : result = match x with
    IntT  -> failure x


and transBoolType (x : boolType) : result = match x with
    BoolT  -> failure x


and transMapType (x : mapType) : result = match x with
    MapT (type'0, beginlist, type', endlist) -> failure x


and transBVType (x : bVType) : result = match x with
    BVT bvtype -> failure x


and transType (x : typeT) : result = match x with
    TypeIntType inttype -> failure x
  | TypeBoolType booltype -> failure x
  | TypeMapType maptype -> failure x
  | TypeBVType bvtype -> failure x


and transIntVal (x : intVal) : result = match x with
    HexInt integerhex -> failure x
  | DecInt integer -> failure x


and transBVVal (x : bVVal) : result = match x with
    BV (intval, bvtype) -> failure x


and transEndian (x : endian) : result = match x with
    LittleEndian  -> failure x
  | BigEndian  -> failure x


and transAssignment (x : assignment) : result = match x with
    Assignment1 (lvar, expr) -> failure x


and transStatement (x : statement) : result = match x with
    Assign assignment -> failure x
  | SimulAssign assignments -> failure x
  | SLoad (lvar, endian, globalident, expr, intval) -> failure x
  | SStore (endian, globalident, expr0, expr, intval) -> failure x
  | DirectCall (calllvars, procident, exprs) -> failure x
  | IndirectCall expr -> failure x
  | Assume expr -> failure x
  | Assert expr -> failure x


and transLocalVar (x : localVar) : result = match x with
    LocalVar1 (localident, type') -> failure x


and transGlobalVar (x : globalVar) : result = match x with
    GlobalVar1 (globalident, type') -> failure x


and transCallLVars (x : callLVars) : result = match x with
    NoOutParams  -> failure x
  | LocalVars localvars -> failure x
  | ListOutParams lvars -> failure x


and transJump (x : jump) : result = match x with
    GoTo blockidents -> failure x
  | Unreachable  -> failure x
  | Return exprs -> failure x


and transLVar (x : lVar) : result = match x with
    LVarDef localvar -> failure x
  | GlobalLVar globalvar -> failure x


and transBlock (x : block) : result = match x with
    Block1 (blockident, attrdeflist, beginlist, statements, jump, endlist) -> failure x


and transAttributeItem (x : attributeItem) : result = match x with
    IntAttr (bident, intval) -> failure x
  | BVAttr (bident, bvval) -> failure x
  | ExprAttr (bident, expr) -> failure x
  | StringAttr (bident, str) -> failure x


and transAttrDefList (x : attrDefList) : result = match x with
    AttrDefListSome (beginrec, attributeitems, endrec) -> failure x
  | AttrDefListEmpty  -> failure x


and transParams (x : params) : result = match x with
    Param (localident, type') -> failure x


and transProcSig (x : procSig) : result = match x with
    ProcedureSig (procident, paramss0, paramss) -> failure x


and transProcDef (x : procDef) : result = match x with
    ProcedureDecl (procsig, attrdeflist) -> failure x
  | ProcedureDef (procsig, attrdeflist, beginlist, blocks, endlist) -> failure x


and transExpr (x : expr) : result = match x with
    BVLiteral bvval -> failure x
  | IntLiteral intval -> failure x
  | TrueLiteral  -> failure x
  | FalseLiteral  -> failure x
  | LRVar localvar -> failure x
  | GRVar globalvar -> failure x
  | FunctionOp (globalident, exprs) -> failure x


and transEqOp (x : eqOp) : result = match x with
    EqOp_eq  -> failure x
  | EqOp_neq  -> failure x


and transBVUnOp (x : bVUnOp) : result = match x with
    BVUnOp_bvnot  -> failure x
  | BVUnOp_bvneg  -> failure x


and transBVBinOp (x : bVBinOp) : result = match x with
    BVBinOp_bvand  -> failure x
  | BVBinOp_bvor  -> failure x
  | BVBinOp_bvadd  -> failure x
  | BVBinOp_bvmul  -> failure x
  | BVBinOp_bvudiv  -> failure x
  | BVBinOp_bvurem  -> failure x
  | BVBinOp_bvshl  -> failure x
  | BVBinOp_bvlshr  -> failure x
  | BVBinOp_bvnand  -> failure x
  | BVBinOp_bvnor  -> failure x
  | BVBinOp_bvxor  -> failure x
  | BVBinOp_bvxnor  -> failure x
  | BVBinOp_bvcomp  -> failure x
  | BVBinOp_bvsub  -> failure x
  | BVBinOp_bvsdiv  -> failure x
  | BVBinOp_bvsrem  -> failure x
  | BVBinOp_bvsmod  -> failure x
  | BVBinOp_bvashr  -> failure x


and transBVLogicalBinOp (x : bVLogicalBinOp) : result = match x with
    BVLogicalBinOp_bvule  -> failure x
  | BVLogicalBinOp_bvugt  -> failure x
  | BVLogicalBinOp_bvuge  -> failure x
  | BVLogicalBinOp_bvult  -> failure x
  | BVLogicalBinOp_bvslt  -> failure x
  | BVLogicalBinOp_bvsle  -> failure x
  | BVLogicalBinOp_bvsgt  -> failure x
  | BVLogicalBinOp_bvsge  -> failure x


and transIntBinOp (x : intBinOp) : result = match x with
    IntBinOp_intadd  -> failure x
  | IntBinOp_intmul  -> failure x
  | IntBinOp_intsub  -> failure x
  | IntBinOp_intdiv  -> failure x
  | IntBinOp_intmod  -> failure x


and transIntLogicalBinOp (x : intLogicalBinOp) : result = match x with
    IntLogicalBinOp_intlt  -> failure x
  | IntLogicalBinOp_intle  -> failure x
  | IntLogicalBinOp_intgt  -> failure x
  | IntLogicalBinOp_intge  -> failure x


and transBoolBinOp (x : boolBinOp) : result = match x with
    BoolBinOp_booland  -> failure x
  | BoolBinOp_boolor  -> failure x
  | BoolBinOp_boolimplies  -> failure x


and transFunSpecDecl (x : funSpecDecl) : result = match x with
    Require expr -> failure x
  | Ensure expr -> failure x
  | LoopInvariant (blockident, expr) -> failure x


and transThrSpecDecl (x : thrSpecDecl) : result = match x with
    Rely expr -> failure x
  | Guarantee expr -> failure x



end
